#!/bin/ksh

# Purpose: Provides an alternative to SNMP monitoring for HACMP (clinfo and clstat). 
#	   Designed to be run within the cluster, not remotely. See next point!
#	   Can be eaily customised to run remotely and monitor multiple clusters!
# Version: 9.01.dennis
#          Updates for PowerHA 7.1
# Authors:	1. Alex Abderrazag IBM UK 
#        	(unless it does not work, then I have no idea who wrote it!)
# 	  	2. Bill Miller IBM US 
# 		Addtions since 8.14 (All bugs down to Bill).
#		3. Dennis van de Sande
#		Improvements and bug fixes

# qha can be freely distributed but I would like to request that the header info. is not changed.  If you have any questions or would like to see any enhancements/updates, please email abmin@lpar.co.uk.

# VARS

export PATH=$PATH:/usr/es/sbin/cluster/utilities
UTILDIR=/usr/es/sbin/cluster/utilities
OUTFILE=/tmp/.qha.$$
LOGGING=/tmp/qha.out.$$
ADFILE=/tmp/.ad.$$
HACMPOUT=`/usr/bin/odmget -q name="hacmp.out" HACMPlogs | fgrep value | sed 's/.*=\ "\(.*\)"$/\1\/hacmp.out/'`
VERSION=`lslpp -L |grep -i cluster.es.server.rte |awk '{print $2}'| sed 's/\.//g`
CLUSTER=`odmget HACMPcluster | grep -v node |grep name | awk '{print $3}' |sed "s:\"::g"`
REFRESH=0

usage()
{
        echo "Usage: qha [-n] [-N] [-v] [-l] [-e] [-m]"
	echo "\t\t-n displays network interfaces\n\t\t-N displays network interfaces + nonIP heartbeat disk\n\t\t-v shows online VGs\n\t\t-l logs entries to /tmp/qha.out\n\t\t-e shows running event\n\t\t-m shows appmon status"
}

function adapters
{
i=1
j=1
cat $ADFILE | while read line
do
  en[i]=`echo $line | awk '{print $1}'`
  name[i]=`echo $line | awk '{print $2}'`
  if [ i -eq 1 ];then printf "\t${en[1]} "; fi
  if [[ ${en[i]} = ${en[j]} ]]
  then
   	printf "${name[i]} "
  else
   	printf "\n\t${en[i]} ${name[i]} "
  fi
  let i=i+1
  let j=i-1
done
rm $ADFILE

if [ $HBOD = "TRUE" ]; then # Code for v6 and below only. To be deleted soon.
 # Process Heartbeat on Disk networks (Bill Millers code)
 VER=`echo $VERSION | cut -c 1`
 if [[ $VER = "7" ]]; then
	print "[HBOD option not supported]" >> $OUTFILE
 fi
 HBODs=$(clrsh $HANODE "$UTILDIR/cllsif" | grep diskhb | grep -w $HANODE | awk '{print $8}')
 for i in $(print $HBODs)
 do
  APVID=$(clrsh $HANODE "lspv" | grep -w $i | awk '{print $2}' | cut -c 13-)
  AHBOD=$(clrsh $HANODE lssrc -ls topsvcs | grep -w r$i | awk '{print $4}')
  if [ $AHBOD ]
  then
    printf "\n\t%-13s %-10s" $i"("$APVID")" [activeHBOD]
  else
    printf "\n\t%-13s %-10s" $i [inactiveHBOD]
  fi
 done
fi
}

function work 
{
HANODE=$1; CNT=$2 NET=$3 VGP=$4
#clrsh $HANODE date > /dev/null 2>&1 || ping -w 1 -c1 $HANODE > /dev/null 2>&1
clrsh $HANODE date > /dev/null 2>&1 
if [ $? -eq 0 ]; then
 EVENT="";
 CLSTRMGR=`clrsh $HANODE lssrc -ls clstrmgrES | grep -i state | sed 's/Current state: //g'` 
 if [[ $CLSTRMGR != ST_STABLE && $CLSTRMGR != ST_INIT && $SHOWEVENT = TRUE ]]; then
   EVENT=$(clrsh $HANODE cat $HACMPOUT | grep "EVENT START" |tail -1 | awk '{print $6}')
   printf "\n%-8s %-7s %-15s\n" $HANODE iState: "$CLSTRMGR [$EVENT]"
 else
  printf "\n%-8s %-7s %-15s\n" $HANODE iState: "$CLSTRMGR"
 fi
 clfindres -s 2>/dev/null |grep -v OFFLINE | while read A
        do
        if [[ "`echo $A | awk -F: '{print $3}'`" == "$HANODE" ]];
	then
	  echo $A | awk -F: '{printf "%-18.16s %-10.12s %-1.20s\n", $1, $2, $9}'
	fi
        done
 # Start OF APPMON CODE
 if [ $APPMONSTAT = "TRUE" ]; then
  for i in `clfindres -s 2>/dev/null | grep -v OFFLINE | grep $HANODE | awk -F: '{print $1}'`
  do
    MON=`clrsh $HANODE $UTILDIR/clRGinfo -m | grep -p $i | grep "ONLINE MONITORED"`
    if [[ -n $MON ]]; then 
      print $i $MON
    fi
  done
 fi
 # End OF APPMON CODE
 if [ $NET = "TRUE" ]; then
  clrsh $HANODE netstat -i | egrep -v "(Name|link|lo)" | awk '{print $1" "$4" "}' > $ADFILE
  adapters; printf "\n- "
 fi
 if [ $VGP = "TRUE" ]; then
   VGO=`clrsh $HANODE "lsvg -o |fgrep -v caavg_private |fgrep -v rootvg |lsvg -pi 2> /dev/null" |awk '{printf $1")"}' |sed 's:)PV_NAME)hdisk::g' | sed 's/:/(/g' |sed 's:):) :g' |sed 's: hdisk:(:g' 2> /dev/null`
   if [ $NET = "TRUE" ]; then
     echo "$VGO-"
   else
     echo "- $VGO-"
   fi
 fi
else
 ping -w 1 -c1 $HANODE > /dev/null 2>&1
 if [ $? -eq 0 ]; then
	echo "\nPing to $HANODE good, but can't get the status. Check clcomdES."
 else
	echo "\n$HANODE not responding, check network availability."
 fi
fi
} 

# Main
NETWORK="FALSE"; VG="FALSE"; HBOD="FALSE"; LOG=false; APPMONSTAT="FALSE"
# Get Vars
while getopts :nNvlem ARGs 
do
               case $ARGs in
               n)     # -n show interface info 
	 		NETWORK="TRUE";;
	       N)     # -N show interface info and activeHBOD
                        NETWORK="TRUE"; HBOD="TRUE";;
               v)     # -v show ONLINE VG info
			VG="TRUE";;
               l)     # -l log to /tmp/qha.out
			LOG="TRUE";;
	       e)     # -e show running events if cluster is unstable
                        SHOWEVENT="TRUE";;
	       m)     # -m show status of monitor app servers if present
                        APPMONSTAT="TRUE";;
	       \?) printf "\nNot a valid option\n\n" ; usage ; exit ;;
               esac
done

echo "" > $LOGGING
trap "rm $OUTFILE; rm $LOGGING; exit 0" 1 2 12 9 15
while true
do
COUNT=0
 print "\\033[H\\033[2J\t\tCluster: $CLUSTER ($VERSION)" > $OUTFILE
 echo "\t\t$(date +%T" "%d%b%y)" >> $OUTFILE
 for MAC in `odmget HACMPnode |grep name |sort -u | awk '{print $3}' |sed "s:\"::g"`
 do
 let COUNT=COUNT+1
	work $MAC $COUNT $NETWORK $VG $HBOD
 done >> $OUTFILE 
 cat $OUTFILE 
 if [ $LOG = "TRUE" ]; then
   cat $OUTFILE |sed s'/^.*Cluster://g' | awk '{print " "$0}' |tr -s '[:space:]' '[ *]' | awk '{print $0}' >> $LOGGING
 fi
 sleep $REFRESH
done

